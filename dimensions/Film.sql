DROP TABLE IF EXISTS DIM_FILM

-- CRIAÇÃO DA TABELA DE DIMENSÃO FILME
CREATE TABLE DIM_FILM
(
  FILM_ID  INT NOT NULL,
  TITLE VARCHAR(25) NOT NULL,
  LAST_UPDATE DATETIME NOT NULL,
  CONSTRAINT PKFILM_ID PRIMARY KEY (FILM_ID ASC)
);

-- Bloco utilizado para verificar se a SP já existe. Se SIM, o banco fará um DROP da SP e irá recriar.
IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE 1=1
     AND SPECIFIC_NAME = N'PROC_ETL_FILM' 
)
   DROP PROCEDURE PROC_ETL_FILM;

-- CREATE THE STORED PROCEDURE 
CREATE PROCEDURE DBO.PROC_ETL_FILM
AS
BEGIN
  -- DECLARAÇÃO DAS VARIÁVEIS DE LOG E CONTROLE
  DECLARE
    --VARIÁVEIS DE TABELA
    @V_FILM_ID INT,
    @V_TITLE VARCHAR(25),
    @V_LAST_UPDATE DATETIME,
    
    --VARIÁVEIS DE CONTROLE DE DADOS PROCESSADOS
    @V_DSC_DADOS_PROCESSAMENTO VARCHAR(2000);

  -- DECLARAÇÃO DO CURSOR
  DECLARE CUR_GET_FILM CURSOR FOR
  SELECT
    ORIGEM.FILM_ID,
    ORIGEM.TITLE,
    ORIGEM.LAST_UPDATE
  FROM film AS ORIGEM
  WHERE NOT EXISTS (SELECT DIM.FILM_ID
                    FROM DIM_FILM DIM
                    WHERE ORIGEM.FILM_ID = DIM.FILM_ID);

  -- ABRE CURSOR PARA EXECUÇÃO
  OPEN CUR_GET_FILM;

  -- CAPTURA PRIMEIRO REGISTRO PARA INICIAR O LOOP
  FETCH NEXT FROM CUR_GET_FILM
  INTO
    @V_FILM_ID,
    @V_TITLE,
    @V_LAST_UPDATE;

  -- LOOP QUE IRÁ EXECUTAR ENQUANTO HOUVER LINHAS NO CURSOR PARA SEREM PROCESSADAS
  WHILE (@@FETCH_STATUS = 0)
  BEGIN
    -- ATRIBUI VALORES PROCESSADOS
    SET @V_DSC_DADOS_PROCESSAMENTO = 'FILM_ID ' + CAST(@V_FILM_ID AS VARCHAR) + CHAR(13) + CHAR(10) +
                                     'TITLE ' + CAST(@V_TITLE AS VARCHAR);
                                     
    BEGIN TRANSACTION;
         INSERT INTO DIM_FILM
         (FILM_ID, TITLE, LAST_UPDATE)
         VALUES
         (@V_FILM_ID, @V_TITLE, @V_LAST_UPDATE);
           
         -- TRATAMENTO DE ERRO
         IF @@ERROR <> 0
         BEGIN
            ROLLBACK;
            -- EXIBE QUAL FOI O ÚLTIMO REGISTRO A SER PROCESSADO
            SELECT @V_DSC_DADOS_PROCESSAMENTO;
            -- FECHA CURSOR E LIBERA RECURSO DE MEMÓRIA
            CLOSE CUR_GET_FILM;
            DEALLOCATE CUR_GET_FILM;
            -- SAI DA SP
            RETURN;
         END -- IF
    COMMIT;
    
    -- CAPTURA PRÓXIMA LINHA DE REGISTROS PARA CONTINUAR O PROCESSAMENTO SE A REGRA DO LOOP AINDA ESTIVER VALENDO
    FETCH NEXT FROM CUR_GET_FILM
    INTO
      @V_FILM_ID,
      @V_TITLE,
      @V_LAST_UPDATE;
  END -- WHILE
  
  -- FECHA CURSOR E LIBERA RECURSO DE MEMÓRIA
  CLOSE CUR_GET_FILM;
  DEALLOCATE CUR_GET_FILM;
END;


EXEC PROC_ETL_FILM


SELECT * FROM DIM_FILM